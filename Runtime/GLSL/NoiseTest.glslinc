#include "UnityCG.glslinc"
#include "GLSLSupport.glslinc"

#if defined(SNOISE) || defined(SNOISE_NGRAD)
    #if defined(THREED)
        #include "SimplexNoise3D.glsl"
    #else
        #include "SimplexNoise2D.glsl"
    #endif
#elif defined(SNOISE_AGRAD)
    #if defined(THREED)
        #include "SimplexNoiseGrad3D.glsl"
    #else
        #include "SimplexNoiseGrad2D.glsl"
    #endif
#else
    #if defined(THREED)
        #include "ClassicNoise3D.glsl"
    #else
        #include "ClassicNoise2D.glsl"
    #endif
#endif

#ifdef VERTEX

varying vec2 uv;

void main()
{
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
    uv = gl_MultiTexCoord0.xy;
}

#endif

#ifdef FRAGMENT

varying vec2 uv;

void main()
{
    const float epsilon = 0.0001;

    vec2 uv = uv.xy * 4.0 + vec2(0.2, 1.0) * _Time.y;

    #if defined(SNOISE_AGRAD) || defined(SNOISE_NGRAD)
        #if defined(THREED)
            vec3 o = vec3(0.5);
        #else
            vec2 o = vec2(0.5);
        #endif
    #else
        float o = 0.5;
    #endif

    float s = 1.0;

    #if defined(SNOISE)
        float w = 0.25;
    #else
        float w = 0.5;
    #endif

    #if defined(FRACTAL)
    for (int i = 0; i < 6; i++)
    #endif
    {
        #if defined(THREED)
            vec3 coord = vec3(uv * s, _Time.y);
            vec3 period = vec3(s, s, 1.0) * 2.0;
        #else
            vec2 coord = uv * s;
            vec2 period = vec2(s) * 2.0;
        #endif

        #if defined(CNOISE)
            o += cnoise(coord) * w;
        #elif defined(PNOISE)
            o += pnoise(coord, period) * w;
        #elif defined(SNOISE)
            o += snoise(coord) * w;
        #elif defined(SNOISE_AGRAD)
            o += snoise_grad(coord) * w;
        #else // SNOISE_NGRAD
            #if defined(THREED)
                float v0 = snoise(coord);
                float vx = snoise(coord + vec3(epsilon, 0, 0));
                float vy = snoise(coord + vec3(0, epsilon, 0));
                float vz = snoise(coord + vec3(0, 0, epsilon));
                o += w * vec3(vx - v0, vy - v0, vz - v0) / epsilon;
            #else
                float v0 = snoise(coord);
                float vx = snoise(coord + vec2(epsilon, 0));
                float vy = snoise(coord + vec2(0, epsilon));
                o += w * vec2(vx - v0, vy - v0) / epsilon;
            #endif
        #endif

        s *= 2.0;
        w *= 0.5;
    }

    #if defined(SNOISE_AGRAD) || defined(SNOISE_NGRAD)
        #if defined(THREED)
            gl_FragColor = vec4(o, 1);
        #else
            gl_FragColor = vec4(o, 1, 1);
        #endif
    #else
        gl_FragColor = vec4(o, o, o, 1);
    #endif
}

#endif
